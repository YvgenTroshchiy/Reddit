// Top-level build file where you can add configuration options common to all sub-projects/modules.

buildscript {
    // Add `canary=true` in ~/.gradle/gradle.properties
    def gradleProperties = new Properties()
    def gradlePropertiesFile = rootProject.file('.gradle/gradle.properties')

    def isCanary = {
        if (!gradlePropertiesFile.isFile()) return false

        gradleProperties.load(new FileInputStream(gradlePropertiesFile))
        def canaryProperty = gradleProperties['canary']
        println("canaryProperty: $canaryProperty")

        if (canaryProperty != null && !canaryProperty.isEmpty()) {
            return canaryProperty.toBoolean()
        } else {
            return false
        }
    }

//    def android_gradle_plugin = (isCanary() ? '4.0.0-alpha09' : '3.6.1')
//    ext.kotlin_version = (isCanary ? '1.3.70' : '1.3.70')

    def android_gradle_plugin = '7.0.2'
    ext.kotlin_version = '1.5.21'
    ext.nav_version = '2.3.4'

    repositories {
        google()
        jcenter()

        maven { url 'https://dl.bintray.com/kotlin/kotlin-eap' }
    }
    dependencies {
        classpath "com.android.tools.build:gradle:$android_gradle_plugin"
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "androidx.navigation:navigation-safe-args-gradle-plugin:$nav_version"

        // For fabric
        classpath 'com.google.gms:google-services:4.3.10'
        classpath 'com.google.firebase:firebase-crashlytics-gradle:2.7.1'
        // NOTE: Do not place your application dependencies here; they belong
        // in the individual module build.gradle files
    }
}

allprojects {
    repositories {
        google()
        jcenter()
        maven { url 'https://dl.bintray.com/kotlin/kotlin-eap' }
    }
}

task clean(type: Delete) {
    delete rootProject.buildDir
}

task debugIsCanaryTask {
    println("--------------------------------")

    def gradleProperties = new Properties()
    def gradlePropertiesFile = rootProject.file('.gradle/gradle.properties')

    def isCanary = {
        if (!gradlePropertiesFile.isFile()) return false

        gradleProperties.load(new FileInputStream(gradlePropertiesFile))
        def canaryProperty = gradleProperties['canary']
        println("canaryProperty: $canaryProperty")

        if (canaryProperty != null && !canaryProperty.isEmpty()) {
            return canaryProperty.toBoolean()
        } else {
            return false
        }
    }

    def android_gradle_plugin = (isCanary() ? 'some CANARY version' : 'some STABLE version')

    println("Version: $android_gradle_plugin")
    println("--------------------------------")
}

//When there is an error in code generation you will may see
//lots of errors due too missing generated code in your logs, we increase
//how many errors are shown here so that the real error is visible when it is near the end
allprojects {
    afterEvaluate {
        tasks.withType(JavaCompile.class) {
            options.compilerArgs << "-Xmaxerrs" << "500"
        }
    }
}
