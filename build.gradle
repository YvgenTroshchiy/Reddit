// Top-level build file where you can add configuration options common to all sub-projects/modules.

buildscript {
    // Add `canary=true` in ~/.gradle/gradle.properties
    def gradleProperties = new Properties()
    def gradlePropertiesFile = rootProject.file('.gradle/gradle.properties')
    gradleProperties.load(new FileInputStream(gradlePropertiesFile))
    def isCanary = gradleProperties['canary']

    def android_gradle_plugin = (isCanary ? '4.0.0-alpha08' : '3.5.0')
    ext.kotlin_version = (isCanary ? '1.3.61' : '1.3.50')

    repositories {
        google()
        jcenter()

        maven { url 'https://maven.fabric.io/public' }
        maven { url 'https://dl.bintray.com/kotlin/kotlin-eap' }
    }
    dependencies {
        classpath "com.android.tools.build:gradle:$android_gradle_plugin"
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"

        // For fabric
        classpath 'com.google.gms:google-services:4.3.3'
        classpath 'io.fabric.tools:gradle:1.31.0'

        // NOTE: Do not place your application dependencies here; they belong
        // in the individual module build.gradle files
    }
}

allprojects {
    repositories {
        google()
        jcenter()
        maven { url 'https://dl.bintray.com/kotlin/kotlin-eap' }
    }
}

task clean(type: Delete) {
    delete rootProject.buildDir
}

//TODO: for debug. delete
task logTask {
    def gradleProperties = new Properties()
    def gradlePropertiesFile = rootProject.file('.gradle/gradle.properties')
    gradleProperties.load(new FileInputStream(gradlePropertiesFile))
    def isCanary = gradleProperties['canary']

    def android_gradle_plugin = (isCanary ? '4.0.0-alpha02' : '3.5.2')

    print("android_gradle_plugin: $android_gradle_plugin")
}

//When there is an error in code generation you will may see
//lots of errors due too missing generated code in your logs, we increase
//how many errors are shown here so that the real error is visible when it is near the end
allprojects {
    afterEvaluate {
        tasks.withType(JavaCompile.class) {
            options.compilerArgs << "-Xmaxerrs" << "500"
        }
    }
}